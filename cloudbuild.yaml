# Ten plik definiuje kroki, które Cloud Build wykona automatycznie.
# Wersja uproszczona, która wykorzystuje zintegrowane budowanie w 'gcloud run deploy'.

# Zmienne podstawieniowe pozwalają na elastyczność.
# Można je nadpisać w ustawieniach aktywatora (triggera).
substitutions:
  _SERVICE_NAME: mariusz-nauka # Zmień na nazwę swojej usługi
  _REGION: europe-west1      # Zmień na swój region

steps:
  # Krok 1: Zbuduj i wdróż aplikację za pomocą jednej komendy.
  # 'gcloud run deploy' z flagą '--source .' automatycznie:
  # 1. Zbuduje obraz kontenera za pomocą Cloud Build (używając lokalnego Dockerfile).
  # 2. Wyśle obraz do Artifact Registry.
  # 3. Wdroży nową wersję na Cloud Run.
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - '${_SERVICE_NAME}'
    - '--source'
    - '.' # Wskazuje, aby budować z bieżącego katalogu
    - '--region'
    - '${_REGION}'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated' # Pozwala na publiczny dostęp. Usuń, jeśli API ma być prywatne.
    - '--set-env-vars=FLASK_CONFIG=production,GCP_PROJECT_ID=$PROJECT_ID'
 
# Opcjonalne: W tym podejściu nazwa obrazu jest generowana automatycznie przez Cloud Build.
# Ustawienie 'logging' na 'CLOUD_LOGGING_ONLY' jest wymagane, gdy używany jest niestandardowy
# service account, aby rozwiązać problem z bucketem na logi.

# ... Twoje kroki kompilacji
logsBucket: 'gs:///mariusz-nauka-logs-mf1969' # <-- WAŻNE: Wstaw tutaj nazwę, którą utworzyłeś
options:
  logging: GCS_ONLY
